{
  "resourceType": "CodeSystem",
  "id": "cql-language-capabilities",
  "extension": [
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg",
      "valueCode": "cds"
    },
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status",
      "valueCode": "trial-use"
    },
    {
      "url": "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm",
      "valueInteger": 2
    }
  ],
  "url": "http://cql.hl7.org/CodeSystem/cql-language-capabilities",
  "name": "CQLLanguageCapabilityCodes",
  "title": "CQL Language Capability Codes",
  "status": "active",
  "experimental": false,
  "publisher": "Clinical Decision Support Workgroup",
  "description": "Codes for CQL language capabilities.",
  "caseSensitive": true,
  "valueSet": "http://cql.hl7.org/ValueSet/cql-language-capability",
  "hierarchyMeaning": "is-a",
  "content": "complete",
  "property": [
    { "code": "version", "uri": "http://cql.hl7.org/CodeSystem/cql-capability-characteristic-codes#version", "description": "The version in which the capability was introduced in the specification", "type": "string"},
    { "code": "versionTo", "uri": "http://cql.hl7.org/CodeSystem/cql-capability-characteristic-codes#versionTo", "description": "The last version in which the capability was included in the specification", "type": "string"},
    { "code": "value", "uri": "http://cql.hl7.org/CodeSystem/cql-capability-characteristic-codes#value", "description": "A qualifier value used to provide more detail about the capability", "type": "string"},
    { "code": "valueMeaning", "uri": "http://cql.hl7.org/CodeSystem/cql-capability-characteristic-codes#valueMeaning", "description": "A description of the meaning of qualifier values for the capability", "type": "string"},
    { "code": "reference", "uri": "http://cql.hl7.org/CodeSystem/cql-capability-characteristic-codes#reference", "description": "A reference to the specification documenting this capability", "type": "string"}
  ],
  "concept": [
    {
      "code": "decimal-precision-and-scale",
      "display": "Decimal precision and scale",
      "definition": "How many total digits (precision) and how many digits to the right of the decimal point (scale) the implementation supports for Decimal values.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        },
        {
          "code": "value",
          "valueString": "28,8"
        },
        {
          "code": "valueMeaning",
          "valueString": "The supported precision and scale of decimal values"
        }
      ]
    },
    {
      "code": "datetime-precision-and-scale",
      "display": "Datetime precision and scale",
      "definition": "The finest granularity (precision) and smallest increment (scale) supported for date/time values. Precision might be year, month, day, second, or millisecond; scale refers to how many fractional digits of seconds are supported (e.g., .123 = millisecond scale).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "ucum-unit-conversion-support",
      "display": "UCUM unit conversion support",
      "definition": "Whether and how the engine can automatically convert between units of measure using UCUM (Unified Code for Units of Measure). For example, being able to convert 1 cm into 0.01 m.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "regex-dialect",
      "display": "Regex dialect",
      "definition": "Which flavor of regular expressions the implementation supports (e.g., PCRE, JavaScript, .NET). This matters since regex syntax can differ slightly across dialects.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "supported-data-models",
      "display": "Supported data models",
      "definition": "Which external models the engine can evaluate against (e.g., FHIR R4, QDM). This lists what structured data sources can be used in retrieve expressions.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "expand-operator",
      "display": "Expand operator",
      "definition": "In the context of CQL, the Expand operator is used on a ValueSet to obtain (materialize) the set of all individual codes that belong to it. In other words, given a value set definition (which may include code hierarchies, includes, excludes), Expand produces the explicit list of codes. (This is part of terminology / vocabulary support.)",
      "property": [
        {
          "code": "version",
          "valueString": "1.3"
        }
      ]
    },
    {
      "code": "fhirpath-support",
      "display": "FHIRPath Support",
      "definition": "The ability of a CQL implementation to evaluate or translate FHIRPath expressions (the query/lang standard for navigating FHIR resources) within CQL logic. This means that within CQL you can use FHIRPath navigation and filtering over FHIR model data as supported by the engine.",
      "property": [
        {
          "code": "version",
          "valueString": "1.3"
        }
      ]
    },
    {
      "code": "precision-operators-for-decimal-and-date-time-types",
      "display": "Precision operators for Decimal and Date/Time types",
      "definition": "Operators that allow you to control or adjust the precision (number of significant digits, fractional parts) of Decimal and date/time types (e.g. truncating or rounding to a given precision). These let you normalize values to particular scales (e.g. rounding to 2 decimal places, truncating to days, etc.).",
      "property": [
        {
          "code": "version",
          "valueString": "1.4"
        }
      ]
    },
    {
      "code": "model-defined-contexts",
      "display": "Model-defined contexts",
      "definition": "Contexts (in define context ...) that are defined by the data model, not just generic ones like Patient or Population. This means the model itself can specify named contexts (for example, “EncounterContext” or “ObservationContext”) which authors can use in CQL to scope their data retrieval or logic.",
      "property": [
        {
          "code": "version",
          "valueString": "1.4"
        }
      ]
    },
    {
      "code": "library-namespaces",
      "display": "Library namespaces",
      "definition": "The ability in CQL to organize libraries into namespaces (or qualified names) so that names (definitions, functions, etc.) do not collide. Namespaces help in modularization and avoid ambiguity when multiple libraries define similarly-named items.",
      "property": [
        {
          "code": "version",
          "valueString": "1.4"
        }
      ]
    },
    {
      "code": "related-context-retrieves",
      "display": "Related-context retrieves",
      "definition": "A retrieve operation that is relative to a context, meaning it retrieves data not just globally but in relation to the current context entity. For example, retrieving “observations of the patient in the current encounter” or “diagnoses for the patient in the same encounter context.” It allows a retrieve to be constrained by context relationship paths.",
      "property": [
        {
          "code": "version",
          "valueString": "1.4"
        }
      ]
    },
    {
      "code": "unit-conversion-support",
      "display": "Unit conversion support",
      "definition": "The engine’s ability to convert between units of measure (especially UCUM units) as needed in expressions. For example, converting from “cm” to “m”, or “mg” to “g” automatically (as long as it’s a valid conversion) so that arithmetic or comparisons across different units can work correctly.",
      "property": [
        {
          "code": "version",
          "valueString": "1.4"
        }
      ]
    },
    {
      "code": "modular-arithmetic-for-quantities",
      "display": "Modular arithmetic for quantities",
      "definition": "Arithmetic operations using mod (or remainder) when applied to Quantities (i.e. numeric values associated with units). This means you can compute something like a mod b where a and b are quantities, provided their units are compatible. The operation yields the remainder after division, respecting unit conversion semantics (i.e. converting units so the operation is meaningful).",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "expand-a-single-interval",
      "display": "Expand a single interval",
      "definition": "The expand operator, when applied to an Interval, produces a sequence (list) of discrete points or sub-values from that interval at a specified step (the “per” value). If you expand a single interval (rather than a list of intervals), you get a list of points rather than further intervals.",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "aggregate-clause",
      "display": "Aggregate clause",
      "definition": "A clause (often in a Query expression) that defines how to accumulate, combine, or reduce multiple values into a summary result (e.g. sum, count, average). In CQL, an aggregate clause allows for grouping and summarizing collections of data.",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "include-retrieves",
      "display": "Include retrieves",
      "definition": "A retrieve that includes not only direct data from the specified model (or context) but also data that is included via relationships or navigations (i.e. following association paths). Essentially, a more inclusive query for related records, not just the primary entity.",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "searchpath-retrieves",
      "display": "Searchpath retrieves",
      "definition": "A retrieve that uses a search path (a path expression) to navigate the data model, filtering or selecting data based on traversing relationships. In other words, rather than retrieve X, you might retrieve X Y somePath where somePath defines which linked entities to follow in the model to constrain or fetch records.",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "id-retrieves",
      "display": "Id retrieves",
      "definition": "A retrieve operation that fetches entities by a unique identifier (id). Instead of retrieving based on criteria or paths, you directly fetch a resource or record with the given id.",
      "property": [
        {
          "code": "version",
          "valueString": "1.5"
        }
      ]
    },
    {
      "code": "system-data-types",
      "display": "System Data Types",
      "definition": "The suite of primitive, structured, and collection types defined by the CQL/ELM System namespace. These types form the foundational data model for all CQL expressions.",
      "concept": [
        {
          "code": "system.integer",
          "display": "System.Integer",
          "definition": "A System data type representing whole numbers with no fractional component.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.long",
          "display": "System.Long",
          "definition": "A System data type representing 64-bit signed integers, used when integer precision exceeds the standard 32-bit range.",
          "property": [
            {
              "code": "version",
              "valueString": "1.5"
            }
          ]
        },
        {
          "code": "system.decimal",
          "display": "System.Decimal",
          "definition": "A System data type representing numeric values with fractional precision and scale.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.string",
          "display": "System.String",
          "definition": "A System data type representing a sequence of text characters.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.boolean",
          "display": "System.Boolean",
          "definition": "A System data type representing logical truth values: true or false.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.date",
          "display": "System.Date",
          "definition": "A System data type representing a calendar date (year, month, and day), without a time component.",
          "property": [
            {
              "code": "version",
              "valueString": "1.3"
            }
          ]
        },
        {
          "code": "system.time",
          "display": "System.Time",
          "definition": "A System data type representing a time of day, possibly including fractions of seconds, without a date.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.datetime",
          "display": "System.DateTime",
          "definition": "A System data type representing a specific point in time, combining a date and time, and optionally a timezone offset.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.quantity",
          "display": "System.Quantity",
          "definition": "A System data type representing a numeric value paired with a unit of measure, such as '5 mg' or '120 mm[Hg]'.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.ratio",
          "display": "System.Ratio",
          "definition": "A System data type representing a fractional relationship between two Quantity values (numerator and denominator).",
          "property": [
            {
              "code": "version",
              "valueString": "1.3"
            }
          ]
        },
        {
          "code": "system.interval",
          "display": "System.Interval",
          "definition": "A System data type representing a continuous or discrete range of values of a given ordered type, such as numbers or dates.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.list",
          "display": "System.List",
          "definition": "A System data type representing an ordered collection of elements of a given type.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.tuple",
          "display": "System.Tuple",
          "definition": "A System structured data type representing a collection of named elements, like a lightweight record or object.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.choice",
          "display": "System.Choice",
          "definition": "A System data type representing a value that may be one of several possible types, such as in FHIR elements with 'value[x]'.",
          "property": [
            {
              "code": "version",
              "valueString": "1.0"
            }
          ]
        },
        {
          "code": "system.codesystem",
          "display": "System.CodeSystem",
          "definition": "A System data type representing a reference to an external code system (e.g., SNOMED CT, LOINC).",
          "property": [
            {
              "code": "version",
              "valueString": "1.5"
            }
          ]
        },
        {
          "code": "system.valueset",
          "display": "System.ValueSet",
          "definition": "A System data type representing a reference to a set of codes defined by one or more code systems.",
          "property": [
            {
              "code": "version",
              "valueString": "1.5"
            }
          ]
        },
        {
          "code": "system.vocabulary",
          "display": "System.Vocabulary",
          "definition": "An abstract System data type serving as the base type for vocabulary-related types such as CodeSystem and ValueSet.",
          "property": [
            {
              "code": "version",
              "valueString": "1.5"
            }
          ]
        }
      ]
    },
    {
      "code": "logical-operators",
      "display": "Logical Operators",
      "definition": "Operators that combine or invert Boolean values under 3-valued logic (i.e. true / false / null). Includes and, or, not, and implies.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "type-operators",
      "display": "Type Operators",
      "definition": "Operators that inspect or convert types. Includes things like is/is not, type conversion or casting operators (e.g. as or explicit casting), possibly “choice” / “choice resolution” or promotion/demotion operators (to handle mixed or choice types).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "nullological-operators",
      "display": "Nullological Operators",
      "definition": "Operators for dealing with null / missing information. Includes things like Null, Coalesce, IsNull, IsTrue / IsFalse",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "comparison-operators",
      "display": "Comparison Operators",
      "definition": "Operators that compare two values to yield a Boolean (or null) result. Includes = (equal), != (not equal), <, <=, >, >=, in / not in.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "arithmetic-operators",
      "display": "Arithmetic Operators",
      "definition": "Operators that work on numeric (or quantity) types. Includes +, -, *, /, mod, unary plus, unary minus (negation), functions like abs, round, power, exp, ln etc. When used with Quantity, they respect unit semantics (unit conversion or compatibility).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "string-operators",
      "display": "String Operators",
      "definition": "Operators to manipulate or query strings. Examples: Concatenation (e.g. & or + depending on syntax); length — number of characters; substring, indexOf, split, startsWith, endsWith; matches — test regex pattern against the string; replaceMatches — replace parts that match a regex.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "date-and-time-operators",
      "display": "Date and Time Operators",
      "definition": "Operators for manipulating or querying dates, times, and datetimes: now(), today() — get the current date/time context; Extract components: e.g. yearOf(), monthOf(), dayOf(), hourOf() etc.; Arithmetic on dates/times: e.g. adding/subtracting durations, intervals; Rounding/truncation operations (e.g. rounding to nearest minute); Comparisons, difference, duration calculations.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval-operators",
      "display": "Interval Operators",
      "definition": "Operators that operate on intervals (ranges) of values: start, end — return boundaries of an interval; contains, in — whether a value is in the interval; union, intersect — combine or overlap intervals; width — size/length of the interval; expand — generate discrete points from an interval; starts, ends — test whether one interval starts or ends another.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "list-operators",
      "display": "List Operators",
      "definition": "Operators on lists (collections) of elements: size — number of elements; empty, not empty; first, last; indexer — get the i-th element; contains, in; union, intersect, except — set-like operations; map, filter, distinct (or equivalent); sort, reverse, zip.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "aggregate-functions",
      "display": "Aggregate Functions",
      "definition": "Functions that reduce a collection (list) into a scalar or summary. Some common ones: count — count of elements; sum, min, max, average; median, mode (if supported); exists, all, any.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "clinical-operators",
      "display": "Clinical Operators",
      "definition": "Operators specific to the clinical/health domain (CQL’s built-ins). Examples: retrieve — fetch clinical data from a data model (FHIR, QDM, etc.); include / expand (for value sets); Terminology functions: in, belongsTo, concept, code, codeSystem, valueSet operations; Temporal and duration operations in clinical context.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "diagnostic-operators",
      "display": "Diagnostic Operators",
      "definition": "Operators used for error handling, messaging, diagnostics, and exception-like behavior in CQL/ELM. Examples: throw / raise / error — cause an error or diagnostic message; log or messaging operators (if the implementation supports emitting debug or diagnostic output); Possibly isDefined, hasValue checks; Operators to test or capture error conditions.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "single-source-query",
      "display": "Single source query",
      "definition": "A query that retrieves or operates over one source collection (a list, interval, or data set).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "relationships-query",
      "display": "Relationships query",
      "definition": "A query that involves two or more source collections in the from clause.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "let-clause-query",
      "display": "Let clause query",
      "definition": "A query that introduces local definitions (bindings) to simplify or reuse expressions.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "where-clause-query",
      "display": "Where clause query",
      "definition": "A query that filters results using Boolean conditions.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "return-clause-query",
      "display": "Return clause query",
      "definition": "Specifies the shape or content of each row returned from the query.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "aggregate-clause-query",
      "display": "Aggregate clause query",
      "definition": "Defines how to reduce a set of query results to a single summary value.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "multi-source-query",
      "display": "Multi source query",
      "definition": "A query that involves two or more source collections in the from clause.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "unfiltered-context-retrieve",
      "display": "Unfiltered context retrieve",
      "definition": "A retrieve that returns all data elements of a given type within the current context, without applying any terminology or attribute filters.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "terminology-based-retrieve",
      "display": "Terminology-based retrieve",
      "definition": "A retrieve that uses a terminology reference (ValueSet, CodeSystem, or Code) to filter the results.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "valueset-terminology-target-retrieve",
      "display": "Valueset terminology target retrieve",
      "definition": "A specific kind of terminology-based retrieve where the filter is a ValueSet reference.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "codesystem-terminology-target-retrieve",
      "display": "CodeSystem terminology target retrieve",
      "definition": "A retrieve filtered to a CodeSystem as the target. This means all codes within that system are valid, possibly with additional criteria.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "code-terminology-target-retrieve",
      "display": "Code terminology target retrieve",
      "definition": "A retrieve filtered by a specific code (not an entire ValueSet or system).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "searchpath-retrieve",
      "display": "Searchpath retrieve",
      "definition": "A retrieve that uses a search path expression into the model to determine the attribute where the terminology applies.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "include-retrieve",
      "display": "Include retrieve",
      "definition": "A retrieve that includes related records by following model-defined references.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "related-context-retrieve",
      "display": "Related-context retrieve",
      "definition": "A retrieve scoped to a different context entity that is related to the current context.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "profile-based-retrieve",
      "display": "Profile-based retrieve",
      "definition": "A retrieve constrained to a profile (a subtype of a resource with additional rules).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "tuple",
      "display": "Tuple",
      "definition": "An structured type with named elements.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "choice",
      "display": "Choice",
      "definition": "A type that allows a value to be one of several specified types.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "list<T>",
      "display": "List<T>",
      "definition": "A collection type. An ordered collection of elements of type T.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<T>",
      "display": "Interval<T>",
      "definition": "An interval type. Represents a continuous or discrete range of values of type T (e.g. numbers, dates).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<integer>",
      "display": "Interval<Integer>",
      "definition": "An interval type. A range of integers.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<decimal>",
      "display": "Interval<Decimal>",
      "definition": "An interval type. A range of decimal numbers.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<date>",
      "display": "Interval<Date>",
      "definition": "An interval type. A range of dates (year/month/day, no time).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<time>",
      "display": "Interval<Time>",
      "definition": "An interval type. A range of times of day (no date).",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    },
    {
      "code": "interval<datetime>",
      "display": "Interval<DateTime>",
      "definition": "An interval type. A range of full date/times.",
      "property": [
        {
          "code": "version",
          "valueString": "1.0"
        }
      ]
    }
  ]
}
