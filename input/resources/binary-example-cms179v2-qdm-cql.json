{
          "resourceType": "Binary",
          "id": "binary-example-cms179v2-qdm-cql",
          "contentType": "text/cql",
          "data": "bGlicmFyeSBDTVMxNzlfUURNIHZlcnNpb24gJzInDQoNCi8vIFdhcmZhcmluIHRpbWUgaW4gdGhlcmFwZXV0aWMgcmFuZ2UNCg0KdXNpbmcgUURNIHZlcnNpb24gJzUuMC4yJw0KDQp2YWx1ZXNldCAiQXRyaWFsIEZpYnJpbGxhdGlvbi9GbHV0dGVyIjogJzIuMTYuODQwLjEuMTEzODgzLjMuMTE3LjEuNy4xLjIwMicNCnZhbHVlc2V0ICJXYXJmYXJpbiI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yMzInDQp2YWx1ZXNldCAiRmFjZS10by1GYWNlIEludGVyYWN0aW9uIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDMuMTAxLjEyLjEwNDgnDQp2YWx1ZXNldCAiT2ZmaWNlIFZpc2l0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDMuMTAxLjEyLjEwMDEnDQp2YWx1ZXNldCAiVmFsdnVsYXIgSGVhcnQgRGlzZWFzZSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDAzLjEwNC4xMi4xMDE3Jw0KdmFsdWVzZXQgIklOUiI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjExNy4xLjcuMS4yMTMnDQp2YWx1ZXNldCAiYmlydGggZGF0ZSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjU2MC4xMDAuNCcNCnZhbHVlc2V0ICJDb21wdXRlZCBWYWx1ZSBJTlIgcGVyY2VudCBUVFIiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwMy4xMDQuMTIuMTAxOCcNCg0KcGFyYW1ldGVyIE1lYXN1cmVtZW50UGVyaW9kIGRlZmF1bHQgSW50ZXJ2YWxbRGF0ZVRpbWUoMjAxMywgMSwgMSwgMCwgMCwgMCwgMCksIERhdGVUaW1lKDIwMTQsIDEsIDEsIDAsIDAsIDAsIDApKQ0KDQpjb250ZXh0IFBhdGllbnQNCg0KZGVmaW5lICJGbHV0dGVyRGlhZ25vc2VzIjoNCglbIkRpYWdub3NpcyI6ICJBdHJpYWwgRmlicmlsbGF0aW9uL0ZsdXR0ZXIiXQ0KDQpkZWZpbmUgIldhcmZhcmluTWVkaWNhdGlvbnMiOiANCglbIk1lZGljYXRpb24sIEFjdGl2ZSI6ICJXYXJmYXJpbiJdDQoNCmRlZmluZSAiRmFjZVRvRmFjZUVuY291bnRlcnMiOiANCglbIkVuY291bnRlciwgUGVyZm9ybWVkIjogIkZhY2UtdG8tRmFjZSBJbnRlcmFjdGlvbiJdDQoNCmRlZmluZSAiT2ZmaWNlVmlzaXRFbmNvdW50ZXJzIjogDQoJWyJFbmNvdW50ZXIsIFBlcmZvcm1lZCI6ICJPZmZpY2UgVmlzaXQiXQ0KDQpkZWZpbmUgIlZhbHZ1bGFySGVhcnREaXNlYXNlRGlhZ25vc2VzIjogDQoJWyJEaWFnbm9zaXMiOiAiVmFsdnVsYXIgSGVhcnQgRGlzZWFzZSJdDQoNCmRlZmluZSAiSU5STGFiUmVzdWx0cyI6IA0KCVsiTGFib3JhdG9yeSBUZXN0LCBQZXJmb3JtZWQiOiAiSU5SIl0NCg0KZGVmaW5lICJCaXJ0aERhdGUiOiANCglbIlBhdGllbnQgQ2hhcmFjdGVyaXN0aWMgQmlydGhkYXRlIjogImJpcnRoIGRhdGUiXQ0KDQpkZWZpbmUgIkNvbXB1dGVkVmFsdWVJTlJQZXJjZW50VFRSIjogDQoJWyJMYWJvcmF0b3J5IFRlc3QsIFBlcmZvcm1lZCI6ICJDb21wdXRlZCBWYWx1ZSBJTlIgcGVyY2VudCBUVFIiXQ0KDQpkZWZpbmUgIkluRGVtb2dyYXBoaWMiOg0KCUFnZUluWWVhcnNBdChzdGFydCBvZiBNZWFzdXJlbWVudFBlcmlvZCkgPj0gMTgNCg0KZGVmaW5lICJJbnBhdGllbnRFbmNvdW50ZXJzIjogDQoJIkZhY2VUb0ZhY2VFbmNvdW50ZXJzIiANCgkJdW5pb24gIk9mZmljZVZpc2l0RW5jb3VudGVycyINCg0KZGVmaW5lICJBY3RpdmVGbHV0dGVyRGlhZ25vc2VzIjoNCgkiRmx1dHRlckRpYWdub3NlcyIgRiANCgkJd2hlcmUgRi5wcmV2YWxlbmNlUGVyaW9kIG92ZXJsYXBzIGJlZm9yZSBNZWFzdXJlbWVudFBlcmlvZA0KDQpkZWZpbmUgIkFjdGl2ZVZhbHZ1bGFySGVhcnREaXNlYXNlRGlhZ25vc2VzIjoNCgkiVmFsdnVsYXJIZWFydERpc2Vhc2VEaWFnbm9zZXMiIEQgDQoJCXdoZXJlIEQucHJldmFsZW5jZVBlcmlvZCBvdmVybGFwcyBiZWZvcmUgTWVhc3VyZW1lbnRQZXJpb2QNCg0KZGVmaW5lICJMb29rYmFja0ludGVydmFsIjogDQoJSW50ZXJ2YWxbc3RhcnQgb2YgTWVhc3VyZW1lbnRQZXJpb2QgLSAyMDAgZGF5cywgc3RhcnQgb2YgTWVhc3VyZW1lbnRQZXJpb2RdDQoNCmRlZmluZSAiQWN0aXZlV2FyZmFyaW5EdXJpbmdMb29rYmFjayI6DQoJIldhcmZhcmluTWVkaWNhdGlvbnMiIE0gDQoJCXdoZXJlIE0ucmVsZXZhbnRQZXJpb2Qgb3ZlcmxhcHMgIkxvb2tiYWNrSW50ZXJ2YWwiDQoNCmRlZmluZSAiV2FyZmFyaW5Vc2FnZUludGVydmFscyI6DQoJY29sbGFwc2UNCgkJIkFjdGl2ZVdhcmZhcmluRHVyaW5nTG9va2JhY2siIE0NCgkJCXJldHVybiBNLnJlbGV2YW50UGVyaW9kIGludGVyc2VjdCAiTG9va2JhY2tJbnRlcnZhbCINCg0KZGVmaW5lICJXYXJmYXJpblVzYWdlIjogDQoJU3VtKCJXYXJmYXJpblVzYWdlSW50ZXJ2YWxzIiBJIHJldHVybiBkdXJhdGlvbiBpbiBkYXlzIG9mIEkpDQoNCmRlZmluZSAiSU5ST3V0cGF0aWVudExhYlJlc3VsdCI6DQoJIklOUkxhYlJlc3VsdHMiIFINCgkJd2hlcmUgbm90IGV4aXN0cyAoDQoJCQkiSW5wYXRpZW50RW5jb3VudGVycyIgRSANCgkJCQl3aGVyZSBkdXJhdGlvbiBpbiBob3VycyBvZiBFLnJlbGV2YW50UGVyaW9kID4gMjMgDQoJCQkJCWFuZCBSLnJlbGV2YW50UGVyaW9kIGR1cmluZyBFLnJlbGV2YW50UGVyaW9kDQoJCSkNCg0KZGVmaW5lICJJTlJSZXN1bHRzQnlEYXkiOg0KCSJJTlJPdXRwYXRpZW50TGFiUmVzdWx0IiBMDQoJCXdoZXJlIEwucmVzdWx0ID4gMC44DQoJCXJldHVybg0KCQkJVHVwbGUgew0KCQkJCXJlc3VsdERhdGU6IGRhdGUgZnJvbSBMLnJlc3VsdERhdGV0aW1lLA0KCQkJCXJlc3VsdDogaWYgTC5yZXN1bHQgPiAxMC4wIHRoZW4gMTAuMCBlbHNlIEwucmVzdWx0LCAvLyBUT0RPOiBVbml0cz8NCgkJCQlkaXN0YW5jZUZyb21NaWRwb2ludDogQWJzKDIuNSAtIEwucmVzdWx0KSAvLyBUT0RPOiBVbml0cz8NCgkJCX0NCg0KLy9OT1RFOiBUaGUgYWJvdmUgVHVwbGUgZGVmaW5lcyBhbiBpZFRhZyAncmVzdWx0Jy4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggdGhlIFFETSBhdHRyaWJ1dGUgInJlc3VsdCIuDQoNCmRlZmluZSAiSU5SUmVzdWx0c1BlckRheSI6DQoJKA0KICAgIChkaXN0aW5jdCAiSU5SUmVzdWx0c0J5RGF5IiBYIHJldHVybiBYLnJlc3VsdERhdGUpIEQNCgkgICAgcmV0dXJuIEZpcnN0KCJJTlJSZXN1bHRzQnlEYXkiIFIgd2hlcmUgUi5yZXN1bHREYXRlID0gRCBzb3J0IGJ5IFIuZGlzdGFuY2VGcm9tTWlkcG9pbnQpDQogICkgWA0KCXNvcnQgYnkgWC5yZXN1bHREYXRlDQoNCmRlZmluZSAiVGhlcmFwZXV0aWNSYW5nZSI6IA0KCUludGVydmFsWzIuMCwgMy4wXSAvLyBUT0RPOiBVbml0cz8NCg0KZGVmaW5lICJJTlJJbnRlcnZhbHMiOg0KCSgiSU5SUmVzdWx0c1BlckRheSIgUyByZXR1cm4gVHVwbGUgeyBzdGFydFJlc3VsdDogUywgZW5kUmVzdWx0OiBGaXJzdCgiSU5SUmVzdWx0c1BlckRheSIgRSB3aGVyZSBTLnJlc3VsdERhdGUgPiBFLnJlc3VsdERhdGUpIH0pIFgNCgkJcmV0dXJuDQoJCQlUdXBsZSB7DQoJCQkJc3RhcnREYXRlOiBYLnN0YXJ0UmVzdWx0LnJlc3VsdERhdGUsDQoJCQkJZW5kRGF0ZTogWC5lbmRSZXN1bHQucmVzdWx0RGF0ZSwNCgkJCQlyZXN1bHREYXlzOiBkYXlzIGJldHdlZW4gWC5zdGFydFJlc3VsdC5yZXN1bHREYXRlIGFuZCBYLmVuZFJlc3VsdC5yZXN1bHREYXRlLA0KCQkJCXJlc3VsdERpZmZlcmVuY2U6IFguZW5kUmVzdWx0LnJlc3VsdCAtIFguc3RhcnRSZXN1bHQucmVzdWx0LA0KCQkJCXJlc3VsdHNXaXRoaW5Cb3VuZHM6IFguc3RhcnRSZXN1bHQucmVzdWx0IGluICJUaGVyYXBldXRpY1JhbmdlIiBhbmQgWC5lbmRSZXN1bHQucmVzdWx0IGluICJUaGVyYXBldXRpY1JhbmdlIiwNCgkJCQlib3VuZGVkRGlmZmVyZW5jZToNCgkJCQkJaWYgWC5lbmRSZXN1bHQucmVzdWx0ID49IFguc3RhcnRSZXN1bHQucmVzdWx0DQoJCQkJCQl0aGVuICgNCgkJCQkJCQlpZiBYLnN0YXJ0UmVzdWx0LnJlc3VsdCA+IGVuZCBvZiAiVGhlcmFwZXV0aWNSYW5nZSIgb3IgWC5lbmRSZXN1bHQucmVzdWx0IDwgc3RhcnQgb2YgIlRoZXJhcGV1dGljUmFuZ2UiDQoJCQkJCQkJCXRoZW4gbnVsbA0KCQkJCQkJCQllbHNlIE1pbih7WC5lbmRSZXN1bHQucmVzdWx0LCBlbmQgb2YgIlRoZXJhcGV1dGljUmFuZ2UifSkgLSBNYXgoe1guc3RhcnRSZXN1bHQucmVzdWx0LCBzdGFydCBvZiAiVGhlcmFwZXV0aWNSYW5nZSJ9KQ0KCQkJCQkJKQ0KCQkJCQkJZWxzZSAoDQoJCQkJCQkJaWYgWC5lbmRSZXN1bHQucmVzdWx0ID4gZW5kIG9mICJUaGVyYXBldXRpY1JhbmdlIiBvciBYLnN0YXJ0UmVzdWx0LnJlc3VsdCA8IHN0YXJ0IG9mICJUaGVyYXBldXRpY1JhbmdlIg0KCQkJCQkJCQl0aGVuIG51bGwNCgkJCQkJCQkJZWxzZSBNaW4oe1guc3RhcnRSZXN1bHQucmVzdWx0LCBlbmQgb2YgIlRoZXJhcGV1dGljUmFuZ2UifSkgLSBNYXgoe1guZW5kUmVzdWx0LnJlc3VsdCwgc3RhcnQgb2YgIlRoZXJhcGV1dGljUmFuZ2UifSkNCgkJCQkJCSksDQoJCQkJaXNWYWxpZDogZGF5cyBiZXR3ZWVuIFguc3RhcnRSZXN1bHQucmVzdWx0RGF0ZSBhbmQgWC5lbmRSZXN1bHQucmVzdWx0RGF0ZSA8PSA1Ng0KCQkJfQ0KDQpkZWZpbmUgIlRoZXJhcGV1dGljRGF5cyI6DQoJIklOUkludGVydmFscyIgSQ0KCQlyZXR1cm4NCgkJCVR1cGxlCXsNCgkJCQlzdGFydERhdGU6IEkuc3RhcnREYXRlLA0KCQkJCWVuZERhdGUgOiBJLmVuZERhdGUsDQoJCQkJaXNWYWxpZCA6IEkuaXNWYWxpZCwNCgkJCQlyZXN1bHREYXlzIDogSS5yZXN1bHREYXlzLA0KCQkJCWRheXNJblJhbmdlIDoNCgkJCQkJaWYgSS5yZXN1bHRzV2l0aGluQm91bmRzDQoJCQkJCQl0aGVuIEkucmVzdWx0RGF5cw0KCQkJCQkJZWxzZSBDb2FsZXNjZShJLnJlc3VsdERheXMgKiBBYnMoSS5ib3VuZGVkRGlmZmVyZW5jZSAvIChpZiBJLnJlc3VsdERheXMgPSAwIHRoZW4gbnVsbCBlbHNlIEkucmVzdWx0RGF5cykpLCAwKQ0KCQkJfQ0KDQpkZWZpbmUgIlRoZXJhcGV1dGljVGltZUluUmFuZ2UiOg0KCVJvdW5kKDEwMCAqIChTdW0oIlRoZXJhcGV1dGljRGF5cyIgWCByZXR1cm4gWC5kYXlzSW5SYW5nZSkgLyBTdW0oIlRoZXJhcGV1dGljRGF5cyIgWCByZXR1cm4gWC5yZXN1bHREYXlzKSkpDQoNCmRlZmluZSAiTnVtYmVyT2ZWYWxpZEludGVydmFscyI6IA0KCUNvdW50KCJUaGVyYXBldXRpY0RheXMiIEQgd2hlcmUgRC5pc1ZhbGlkKQ0KDQpkZWZpbmUgIkhhc1ZhbGlkSW50ZXJ2YWxzIjogDQoJIk51bWJlck9mVmFsaWRJbnRlcnZhbHMiID49IDINCg0KZGVmaW5lICJJbml0aWFsUG9wdWxhdGlvbiI6DQoJIkluRGVtb2dyYXBoaWMiDQoJCWFuZCBleGlzdHMgKCJJbnBhdGllbnRFbmNvdW50ZXJzIikNCgkJYW5kIGV4aXN0cyAoIkFjdGl2ZUZsdXR0ZXJEaWFnbm9zZXMiKQ0KCQlhbmQgIldhcmZhcmluVXNhZ2UiID49IDE4MA0KCQlhbmQgbm90IGV4aXN0cyAoIkFjdGl2ZVZhbHZ1bGFySGVhcnREaXNlYXNlRGlhZ25vc2VzIikNCg0KZGVmaW5lICJNZWFzdXJlUG9wdWxhdGlvbiI6DQoJIkhhc1ZhbGlkSW50ZXJ2YWxzIg0KDQpkZWZpbmUgIk1lYXN1cmVPYnNlcnZhdGlvbiI6DQoJIlRoZXJhcGV1dGljVGltZUluUmFuZ2UiDQoNCmNvbnRleHQgUG9wdWxhdGlvbg0KDQpkZWZpbmUgIk1lYXN1cmVTY29yZSI6IEF2ZygiTWVhc3VyZU9ic2VydmF0aW9uIikNCg=="
		}