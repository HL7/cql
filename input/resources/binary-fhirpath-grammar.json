{
  "resourceType": "Binary",
  "id": "binary-fhirpath-grammar",
  "contentType": "text/plain",
  "data": "Z3JhbW1hciBmaGlycGF0aDsKCi8vIEdyYW1tYXIgcnVsZXMKLy8gW0ZISVJQYXRoXShodHRwOi8vaGw3Lm9yZy9maGlycGF0aC8yMDE5TWF5KSBOb3JtYXRpdmUgQmFsbG90IDMKCi8vcHJvZzogbGluZSAobGluZSkqOwovL2xpbmU6IElEICggJygnIGV4cHIgJyknKSAnOicgZXhwciAnXHInPyAnXG4nOwoKZXhwcmVzc2lvbgogICAgICAgIDogdGVybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0ZXJtRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnLicgaW52b2NhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbnZvY2F0aW9uRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnWycgZXhwcmVzc2lvbiAnXScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbmRleGVyRXhwcmVzc2lvbgogICAgICAgIHwgKCcrJyB8ICctJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwb2xhcml0eUV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCcqJyB8ICcvJyB8ICdkaXYnIHwgJ21vZCcpIGV4cHJlc3Npb24gICAgICAgICAjbXVsdGlwbGljYXRpdmVFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICgnKycgfCAnLScgfCAnJicpIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgI2FkZGl0aXZlRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAoJ2lzJyB8ICdhcycpIHR5cGVTcGVjaWZpZXIgICAgICAgICAgICAgICAgICAgICN0eXBlRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnfCcgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1bmlvbkV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCc8PScgfCAnPCcgfCAnPicgfCAnPj0nKSBleHByZXNzaW9uICAgICAgICAgICAjaW5lcXVhbGl0eUV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCc9JyB8ICd+JyB8ICchPScgfCAnIX4nKSBleHByZXNzaW9uICAgICAgICAgICAjZXF1YWxpdHlFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICgnaW4nIHwgJ2NvbnRhaW5zJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgI21lbWJlcnNoaXBFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICdhbmQnIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2FuZEV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCdvcicgfCAneG9yJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAjb3JFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICdpbXBsaWVzJyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgI2ltcGxpZXNFeHByZXNzaW9uCiAgICAgICAgLy98IChJREVOVElGSUVSKT8gJz0+JyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGFtYmRhRXhwcmVzc2lvbgogICAgICAgIDsKCnRlcm0KICAgICAgICA6IGludm9jYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbnZvY2F0aW9uVGVybQogICAgICAgIHwgbGl0ZXJhbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpdGVyYWxUZXJtCiAgICAgICAgfCBleHRlcm5hbENvbnN0YW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXh0ZXJuYWxDb25zdGFudFRlcm0KICAgICAgICB8ICcoJyBleHByZXNzaW9uICcpJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwYXJlbnRoZXNpemVkVGVybQogICAgICAgIDsKCmxpdGVyYWwKICAgICAgICA6ICd7JyAnfScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNudWxsTGl0ZXJhbAogICAgICAgIHwgKCd0cnVlJyB8ICdmYWxzZScpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Jvb2xlYW5MaXRlcmFsCiAgICAgICAgfCBTVFJJTkcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RyaW5nTGl0ZXJhbAogICAgICAgIHwgTlVNQkVSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI251bWJlckxpdGVyYWwKICAgICAgICB8IERBVEVUSU1FICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNkYXRlVGltZUxpdGVyYWwKICAgICAgICB8IFRJTUUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0aW1lTGl0ZXJhbAogICAgICAgIHwgcXVhbnRpdHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3F1YW50aXR5TGl0ZXJhbAogICAgICAgIDsKCmV4dGVybmFsQ29uc3RhbnQKICAgICAgICA6ICclJyAoIGlkZW50aWZpZXIgfCBTVFJJTkcgKQogICAgICAgIDsKCmludm9jYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlcm1zIHRoYXQgY2FuIGJlIHVzZWQgYWZ0ZXIgdGhlIGZ1bmN0aW9uL21lbWJlciBpbnZvY2F0aW9uICcuJwogICAgICAgIDogaWRlbnRpZmllciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI21lbWJlckludm9jYXRpb24KICAgICAgICB8IGZ1bmN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNmdW5jdGlvbkludm9jYXRpb24KICAgICAgICB8ICckdGhpcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0aGlzSW52b2NhdGlvbgogICAgICAgIHwgJyRpbmRleCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luZGV4SW52b2NhdGlvbgogICAgICAgIHwgJyR0b3RhbCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RvdGFsSW52b2NhdGlvbgogICAgICAgIDsKCmZ1bmN0aW9uCiAgICAgICAgOiBpZGVudGlmaWVyICcoJyBwYXJhbUxpc3Q/ICcpJwogICAgICAgIDsKCnBhcmFtTGlzdAogICAgICAgIDogZXhwcmVzc2lvbiAoJywnIGV4cHJlc3Npb24pKgogICAgICAgIDsKCnF1YW50aXR5CiAgICAgICAgOiBOVU1CRVIgdW5pdD8KICAgICAgICA7Cgp1bml0CiAgICAgICAgOiBkYXRlVGltZVByZWNpc2lvbgogICAgICAgIHwgcGx1cmFsRGF0ZVRpbWVQcmVjaXNpb24KICAgICAgICB8IFNUUklORyAvLyBVQ1VNIHN5bnRheCBmb3IgdW5pdHMgb2YgbWVhc3VyZQogICAgICAgIDsKCmRhdGVUaW1lUHJlY2lzaW9uCiAgICAgICAgOiAneWVhcicgfCAnbW9udGgnIHwgJ3dlZWsnIHwgJ2RheScgfCAnaG91cicgfCAnbWludXRlJyB8ICdzZWNvbmQnIHwgJ21pbGxpc2Vjb25kJwogICAgICAgIDsKCnBsdXJhbERhdGVUaW1lUHJlY2lzaW9uCiAgICAgICAgOiAneWVhcnMnIHwgJ21vbnRocycgfCAnd2Vla3MnIHwgJ2RheXMnIHwgJ2hvdXJzJyB8ICdtaW51dGVzJyB8ICdzZWNvbmRzJyB8ICdtaWxsaXNlY29uZHMnCiAgICAgICAgOwoKdHlwZVNwZWNpZmllcgogICAgICAgIDogcXVhbGlmaWVkSWRlbnRpZmllcgogICAgICAgIDsKCnF1YWxpZmllZElkZW50aWZpZXIKICAgICAgICA6IGlkZW50aWZpZXIgKCcuJyBpZGVudGlmaWVyKSoKICAgICAgICA7CgppZGVudGlmaWVyCiAgICAgICAgOiBJREVOVElGSUVSCiAgICAgICAgfCBERUxJTUlURURJREVOVElGSUVSCiAgICAgICAgfCAnYXMnCiAgICAgICAgfCAnY29udGFpbnMnCiAgICAgICAgfCAnaW4nCiAgICAgICAgfCAnaXMnCiAgICAgICAgOwoKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICBMZXhpY2FsIHJ1bGVzCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLy8gTm90IHN1cmUgd2h5LCBidXQgd2l0aCB0aGVzZSBhcyBsZXhpY2FsIHJ1bGVzLCB3aGVuIHRoZSBncmFtbWFyIGlzIGltcG9ydGVkIGludG8gQ1FMLCB0aGV5IGFyZSBub3QgY29ycmVjdGx5IHJlY29nbml6ZWQKLy8gTW92aW5nIHRoZSBzYW1lIHJ1bGVzIGludG8gdGhlIGxpdGVyYWwgcHJvZHVjdGlvbiBydWxlIGFib3ZlIGNvcnJlY3RzIHRoZSBpc3N1ZQovL0VNUFRZCi8vICAgICAgICA6ICd7JyAnfScKLy8gICAgICAgIDsgICAgICAgICAgICAgICAgICAgICAgLy8gVG8gY3JlYXRlIGFuIGVtcHR5IGFycmF5IChhbmQgYXZvaWQgYSBOVUxMIGxpdGVyYWwpCgovL0JPT0wKLy8gICAgICAgIDogJ3RydWUnCi8vICAgICAgICB8ICdmYWxzZScKLy8gICAgICAgIDsKCkRBVEVUSU1FCiAgICAgICAgOiAnQCcKICAgICAgICAgICAgWzAtOV1bMC05XVswLTldWzAtOV0gLy8geWVhcgogICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAnLSdbMC05XVswLTldIC8vIG1vbnRoCiAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgJy0nWzAtOV1bMC05XSAvLyBkYXkKICAgICAgICAgICAgICAgICAgICAoCiAgICAgICAgICAgICAgICAgICAgICAgICdUJyBUSU1FRk9STUFUPwogICAgICAgICAgICAgICAgICAgICk/CiAgICAgICAgICAgICAgICAgKT8KICAgICAgICAgICAgICk/CiAgICAgICAgICAgICAoJ1onIHwgKCcrJyB8ICctJykgWzAtOV1bMC05XSc6J1swLTldWzAtOV0pPyAvLyB0aW1lem9uZQogICAgICAgIDsKClRJTUUKICAgICAgICA6ICdAJyAnVCcgVElNRUZPUk1BVAogICAgICAgIDsKCmZyYWdtZW50IFRJTUVGT1JNQVQKICAgICAgICA6IFswLTldWzAtOV0gKCc6J1swLTldWzAtOV0gKCc6J1swLTldWzAtOV0gKCcuJ1swLTldKyk/KT8pPwogICAgICAgIDsKCklERU5USUZJRVIKICAgICAgICA6IChbQS1aYS16XSB8ICdfJykoW0EtWmEtejAtOV0gfCAnXycpKiAgICAgICAgICAgIC8vIEFkZGVkIF8gdG8gc3VwcG9ydCBDUUwgKEZISVIgY291bGQgY29uc3RyYWluIGl0IG91dCkKICAgICAgICA7CgpERUxJTUlURURJREVOVElGSUVSCiAgICAgICAgOiAnYCcgKEVTQyB8IC4pKj8gJ2AnCiAgICAgICAgOwoKU1RSSU5HCiAgICAgICAgOiAnXCcnIChFU0MgfCAuKSo/ICdcJycKICAgICAgICA7CgovLyBBbHNvIGFsbG93cyBsZWFkaW5nIHplcm9lcyBub3cgKGp1c3QgbGlrZSBDUUwgYW5kIFhTRCkKTlVNQkVSCiAgICAgICAgOiBbMC05XSsoJy4nIFswLTldKyk/CiAgICAgICAgOwoKLy8gUGlwZSB3aGl0ZXNwYWNlIHRvIHRoZSBISURERU4gY2hhbm5lbCB0byBzdXBwb3J0IHJldHJpZXZpbmcgc291cmNlIHRleHQgdGhyb3VnaCB0aGUgcGFyc2VyLgpXUwogICAgICAgIDogWyBcclxuXHRdKyAtPiBjaGFubmVsKEhJRERFTikKICAgICAgICA7CgpDT01NRU5UCiAgICAgICAgOiAnLyonIC4qPyAnKi8nIC0+IGNoYW5uZWwoSElEREVOKQogICAgICAgIDsKCkxJTkVfQ09NTUVOVAogICAgICAgIDogJy8vJyB+W1xyXG5dKiAtPiBjaGFubmVsKEhJRERFTikKICAgICAgICA7CgpmcmFnbWVudCBFU0MKICAgICAgICA6ICdcXCcgKFtgJ1xcL2ZucnRdIHwgVU5JQ09ERSkgICAgLy8gYWxsb3cgXGAsIFwnLCBcXCwgXC8sIFxmLCBldGMuIGFuZCBcdVhYWAogICAgICAgIDsKCmZyYWdtZW50IFVOSUNPREUKICAgICAgICA6ICd1JyBIRVggSEVYIEhFWCBIRVgKICAgICAgICA7CgpmcmFnbWVudCBIRVgKICAgICAgICA6IFswLTlhLWZBLUZdCiAgICAgICAgOwo="
}