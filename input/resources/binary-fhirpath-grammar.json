{
  "resourceType": "Binary",
  "id": "binary-fhirpath-grammar",
  "contentType": "text/plain",
  "data": "Z3JhbW1hciBmaGlycGF0aDsKCi8vIEdyYW1tYXIgcnVsZXMKLy8gW0ZISVJQYXRoXShodHRwOi8vaGw3Lm9yZy9maGlycGF0aC9OMSkgTm9ybWF0aXZlIFJlbGVhc2UKCi8vcHJvZzogbGluZSAobGluZSkqOwovL2xpbmU6IElEICggJygnIGV4cHIgJyknKSAnOicgZXhwciAnXHInPyAnXG4nOwoKZXhwcmVzc2lvbgogICAgICAgIDogdGVybSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0ZXJtRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnLicgaW52b2NhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbnZvY2F0aW9uRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnWycgZXhwcmVzc2lvbiAnXScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbmRleGVyRXhwcmVzc2lvbgogICAgICAgIHwgKCcrJyB8ICctJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwb2xhcml0eUV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCcqJyB8ICcvJyB8ICdkaXYnIHwgJ21vZCcpIGV4cHJlc3Npb24gICAgICAgICAjbXVsdGlwbGljYXRpdmVFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICgnKycgfCAnLScgfCAnJicpIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgI2FkZGl0aXZlRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAoJ2lzJyB8ICdhcycpIHR5cGVTcGVjaWZpZXIgICAgICAgICAgICAgICAgICAgICN0eXBlRXhwcmVzc2lvbgogICAgICAgIHwgZXhwcmVzc2lvbiAnfCcgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1bmlvbkV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCc8PScgfCAnPCcgfCAnPicgfCAnPj0nKSBleHByZXNzaW9uICAgICAgICAgICAjaW5lcXVhbGl0eUV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCc9JyB8ICd+JyB8ICchPScgfCAnIX4nKSBleHByZXNzaW9uICAgICAgICAgICAjZXF1YWxpdHlFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICgnaW4nIHwgJ2NvbnRhaW5zJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgI21lbWJlcnNoaXBFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICdhbmQnIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2FuZEV4cHJlc3Npb24KICAgICAgICB8IGV4cHJlc3Npb24gKCdvcicgfCAneG9yJykgZXhwcmVzc2lvbiAgICAgICAgICAgICAgICAgICAgICAjb3JFeHByZXNzaW9uCiAgICAgICAgfCBleHByZXNzaW9uICdpbXBsaWVzJyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgI2ltcGxpZXNFeHByZXNzaW9uCiAgICAgICAgLy98IChJREVOVElGSUVSKT8gJz0+JyBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGFtYmRhRXhwcmVzc2lvbgogICAgICAgIDsKCnRlcm0KICAgICAgICA6IGludm9jYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpbnZvY2F0aW9uVGVybQogICAgICAgIHwgbGl0ZXJhbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpdGVyYWxUZXJtCiAgICAgICAgfCBleHRlcm5hbENvbnN0YW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXh0ZXJuYWxDb25zdGFudFRlcm0KICAgICAgICB8ICcoJyBleHByZXNzaW9uICcpJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwYXJlbnRoZXNpemVkVGVybQogICAgICAgIDsKCmxpdGVyYWwKICAgICAgICA6ICd7JyAnfScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNudWxsTGl0ZXJhbAogICAgICAgIHwgKCd0cnVlJyB8ICdmYWxzZScpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Jvb2xlYW5MaXRlcmFsCiAgICAgICAgfCBTVFJJTkcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RyaW5nTGl0ZXJhbAogICAgICAgIHwgTlVNQkVSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI251bWJlckxpdGVyYWwKICAgICAgICB8IERBVEUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNkYXRlTGl0ZXJhbAogICAgICAgIHwgREFURVRJTUUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2RhdGVUaW1lTGl0ZXJhbAogICAgICAgIHwgVElNRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RpbWVMaXRlcmFsCiAgICAgICAgfCBxdWFudGl0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcXVhbnRpdHlMaXRlcmFsCiAgICAgICAgOwoKZXh0ZXJuYWxDb25zdGFudAogICAgICAgIDogJyUnICggaWRlbnRpZmllciB8IFNUUklORyApCiAgICAgICAgOwoKaW52b2NhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVybXMgdGhhdCBjYW4gYmUgdXNlZCBhZnRlciB0aGUgZnVuY3Rpb24vbWVtYmVyIGludm9jYXRpb24gJy4nCiAgICAgICAgOiBpZGVudGlmaWVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbWVtYmVySW52b2NhdGlvbgogICAgICAgIHwgZnVuY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Z1bmN0aW9uSW52b2NhdGlvbgogICAgICAgIHwgJyR0aGlzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RoaXNJbnZvY2F0aW9uCiAgICAgICAgfCAnJGluZGV4JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjaW5kZXhJbnZvY2F0aW9uCiAgICAgICAgfCAnJHRvdGFsJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdG90YWxJbnZvY2F0aW9uCiAgICAgICAgOwoKZnVuY3Rpb24KICAgICAgICA6IGlkZW50aWZpZXIgJygnIHBhcmFtTGlzdD8gJyknCiAgICAgICAgOwoKcGFyYW1MaXN0CiAgICAgICAgOiBleHByZXNzaW9uICgnLCcgZXhwcmVzc2lvbikqCiAgICAgICAgOwoKcXVhbnRpdHkKICAgICAgICA6IE5VTUJFUiB1bml0PwogICAgICAgIDsKCnVuaXQKICAgICAgICA6IGRhdGVUaW1lUHJlY2lzaW9uCiAgICAgICAgfCBwbHVyYWxEYXRlVGltZVByZWNpc2lvbgogICAgICAgIHwgU1RSSU5HIC8vIFVDVU0gc3ludGF4IGZvciB1bml0cyBvZiBtZWFzdXJlCiAgICAgICAgOwoKZGF0ZVRpbWVQcmVjaXNpb24KICAgICAgICA6ICd5ZWFyJyB8ICdtb250aCcgfCAnd2VlaycgfCAnZGF5JyB8ICdob3VyJyB8ICdtaW51dGUnIHwgJ3NlY29uZCcgfCAnbWlsbGlzZWNvbmQnCiAgICAgICAgOwoKcGx1cmFsRGF0ZVRpbWVQcmVjaXNpb24KICAgICAgICA6ICd5ZWFycycgfCAnbW9udGhzJyB8ICd3ZWVrcycgfCAnZGF5cycgfCAnaG91cnMnIHwgJ21pbnV0ZXMnIHwgJ3NlY29uZHMnIHwgJ21pbGxpc2Vjb25kcycKICAgICAgICA7Cgp0eXBlU3BlY2lmaWVyCiAgICAgICAgOiBxdWFsaWZpZWRJZGVudGlmaWVyCiAgICAgICAgOwoKcXVhbGlmaWVkSWRlbnRpZmllcgogICAgICAgIDogaWRlbnRpZmllciAoJy4nIGlkZW50aWZpZXIpKgogICAgICAgIDsKCmlkZW50aWZpZXIKICAgICAgICA6IElERU5USUZJRVIKICAgICAgICB8IERFTElNSVRFRElERU5USUZJRVIKICAgICAgICB8ICdhcycKICAgICAgICB8ICdjb250YWlucycKICAgICAgICB8ICdpbicKICAgICAgICB8ICdpcycKICAgICAgICA7CgoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgIExleGljYWwgcnVsZXMKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgovKgpOT1RFOiBUaGUgZ29hbCBvZiB0aGVzZSBydWxlcyBpbiB0aGUgZ3JhbW1hciBpcyB0byBwcm92aWRlIGEgZGF0ZQp0b2tlbiB0byB0aGUgcGFyc2VyLiBBcyBzdWNoIGl0IGlzIG5vdCBhdHRlbXB0aW5nIHRvIHZhbGlkYXRlIHRoYXQKdGhlIGRhdGUgaXMgYSBjb3JyZWN0IGRhdGUsIHRoYXQgdGFzayBpcyBmb3IgdGhlIHBhcnNlciBvciBpbnRlcnByZXRlci4KKi8KCkRBVEUKICAgICAgICA6ICdAJyBEQVRFRk9STUFUCiAgICAgICAgOwoKREFURVRJTUUKICAgICAgICA6ICdAJyBEQVRFRk9STUFUICdUJyAoVElNRUZPUk1BVCBUSU1FWk9ORU9GRlNFVEZPUk1BVD8pPwogICAgICAgIDsKClRJTUUKICAgICAgICA6ICdAJyAnVCcgVElNRUZPUk1BVAogICAgICAgIDsKCmZyYWdtZW50IERBVEVGT1JNQVQKICAgICAgICA6IFswLTldWzAtOV1bMC05XVswLTldICgnLSdbMC05XVswLTldICgnLSdbMC05XVswLTldKT8pPwogICAgICAgIDsKCmZyYWdtZW50IFRJTUVGT1JNQVQKICAgICAgICA6IFswLTldWzAtOV0gKCc6J1swLTldWzAtOV0gKCc6J1swLTldWzAtOV0gKCcuJ1swLTldKyk/KT8pPwogICAgICAgIDsKCmZyYWdtZW50IFRJTUVaT05FT0ZGU0VURk9STUFUCiAgICAgICAgOiAoJ1onIHwgKCcrJyB8ICctJykgWzAtOV1bMC05XSc6J1swLTldWzAtOV0pCiAgICAgICAgOwoKSURFTlRJRklFUgogICAgICAgIDogKFtBLVphLXpdIHwgJ18nKShbQS1aYS16MC05XSB8ICdfJykqICAgICAgICAgICAgLy8gQWRkZWQgXyB0byBzdXBwb3J0IENRTCAoRkhJUiBjb3VsZCBjb25zdHJhaW4gaXQgb3V0KQogICAgICAgIDsKCkRFTElNSVRFRElERU5USUZJRVIKICAgICAgICA6ICdgJyAoRVNDIHwgLikqPyAnYCcKICAgICAgICA7CgpTVFJJTkcKICAgICAgICA6ICdcJycgKEVTQyB8IC4pKj8gJ1wnJwogICAgICAgIDsKCi8vIEFsc28gYWxsb3dzIGxlYWRpbmcgemVyb2VzIG5vdyAoanVzdCBsaWtlIENRTCBhbmQgWFNEKQpOVU1CRVIKICAgICAgICA6IFswLTldKygnLicgWzAtOV0rKT8KICAgICAgICA7CgovLyBQaXBlIHdoaXRlc3BhY2UgdG8gdGhlIEhJRERFTiBjaGFubmVsIHRvIHN1cHBvcnQgcmV0cmlldmluZyBzb3VyY2UgdGV4dCB0aHJvdWdoIHRoZSBwYXJzZXIuCldTCiAgICAgICAgOiBbIFxyXG5cdF0rIC0+IGNoYW5uZWwoSElEREVOKQogICAgICAgIDsKCkNPTU1FTlQKICAgICAgICA6ICcvKicgLio/ICcqLycgLT4gY2hhbm5lbChISURERU4pCiAgICAgICAgOwoKTElORV9DT01NRU5UCiAgICAgICAgOiAnLy8nIH5bXHJcbl0qIC0+IGNoYW5uZWwoSElEREVOKQogICAgICAgIDsKCmZyYWdtZW50IEVTQwogICAgICAgIDogJ1xcJyAoW2AnXFwvZm5ydF0gfCBVTklDT0RFKSAgICAvLyBhbGxvdyBcYCwgXCcsIFxcLCBcLywgXGYsIGV0Yy4gYW5kIFx1WFhYCiAgICAgICAgOwoKZnJhZ21lbnQgVU5JQ09ERQogICAgICAgIDogJ3UnIEhFWCBIRVggSEVYIEhFWAogICAgICAgIDsKCmZyYWdtZW50IEhFWAogICAgICAgIDogWzAtOWEtZkEtRl0KICAgICAgICA7Cg=="
}